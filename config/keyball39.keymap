#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph

    behaviors {
        bcmd5: bcmd5 {
            compatible = "zmk,behavior-hold-tap";
            label = "BCMD5";
            bindings = <&cmd5>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        right: right {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT";
            #binding-cells = <0>;
            bindings = <&mt RG(RIGHT_SHIFT) LG(L)>, <&kp RIGHT>;

            mods = <(MOD_LGUI)>;
        };

        up: up {
            compatible = "zmk,behavior-mod-morph";
            label = "UP";
            #binding-cells = <0>;
            bindings = <&kp LG(I)>, <&kp UP>;

            mods = <(MOD_LGUI)>;
        };

        down: down {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN";
            #binding-cells = <0>;
            bindings = <&kp LG(K)>, <&kp DOWN>;

            mods = <(MOD_LGUI)>;
        };

        l5n: l5n {
            compatible = "zmk,behavior-mod-morph";
            label = "L5N";
            #binding-cells = <0>;
            bindings = <&kp LG(N)>, <&kp LEFT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5m: l5m {
            compatible = "zmk,behavior-mod-morph";
            label = "L5M";
            #binding-cells = <0>;
            bindings = <&kp LG(M)>, <&kp RIGHT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5a: l5a {
            compatible = "zmk,behavior-mod-morph";
            label = "L5A";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_ALT) LG(A)>, <&kp A>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5s: l5s {
            compatible = "zmk,behavior-mod-morph";
            label = "L5S";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_SHIFT) LG(S)>, <&kp S>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5gz: l5gz {
            compatible = "zmk,behavior-mod-morph";
            label = "L5GZ";
            #binding-cells = <0>;
            bindings = <&kp LG(G)>, <&kp LS(Z)>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5dc: l5dc {
            compatible = "zmk,behavior-mod-morph";
            label = "L5DC";
            #binding-cells = <0>;
            bindings = <&kp LG(D)>, <&kp C>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5vf: l5vf {
            compatible = "zmk,behavior-mod-morph";
            label = "L5VF";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_CONTROL) LG(F)>, <&kp V>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5rf3: l5rf3 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5RF3";
            #binding-cells = <0>;
            bindings = <&kp LG(R)>, <&kp F3>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5ef2: l5ef2 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5EF2";
            #binding-cells = <0>;
            bindings = <&kp LG(E)>, <&kp F2>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5tf4: l5tf4 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5TF4";
            #binding-cells = <0>;
            bindings = <&kp LG(T)>, <&kp F4>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5tabq: l5tabq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5TABQ";
            #binding-cells = <0>;
            bindings = <&kp LG(Q)>, <&kp TAB>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5stabw: l5stabw {
            compatible = "zmk,behavior-mod-morph";
            label = "L5STABW";
            #binding-cells = <0>;
            bindings = <&kp LG(W)>, <&kp LS(TAB)>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5altq: l5altq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5ALTQ";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT_ALT)>, <&kp GRAVE>;

            mods = <(MOD_LGUI)>;
        };

        lll: lll {
            compatible = "zmk,behavior-mod-morph";
            label = "LLL";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_ARROW>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        rrr: rrr {
            compatible = "zmk,behavior-mod-morph";
            label = "RRR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5bbs: l5bbs {
            compatible = "zmk,behavior-mod-morph";
            label = "L5BBS";
            #binding-cells = <0>;
            bindings = <&kp LG(B)>, <&kp BACKSLASH>;

            mods = <(MOD_LGUI)>;
        };

        l5clkesc: l5clkesc {
            compatible = "zmk,behavior-mod-morph";
            label = "L5CLKESC";
            #binding-cells = <0>;
            bindings = <&cmdclick>, <&kp ESC>;

            mods = <(MOD_LGUI)>;
        };

        l5opu: l5opu {
            compatible = "zmk,behavior-mod-morph";
            label = "L5OPU";
            #binding-cells = <0>;
            bindings = <&kp LG(O)>, <&kp PAGE_UP>;

            mods = <(MOD_LGUI)>;
        };

        l5hgrave: l5hgrave {
            compatible = "zmk,behavior-mod-morph";
            label = "L5HGRAVE";
            #binding-cells = <0>;
            bindings = <&kp LG(H)>, <&kp GRAVE>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5ppd: l5ppd {
            compatible = "zmk,behavior-mod-morph";
            label = "L5PPD";
            #binding-cells = <0>;
            bindings = <&kp LG(P)>, <&kp PAGE_DOWN>;

            mods = <(MOD_LGUI)>;
        };

        l5y: l5y {
            compatible = "zmk,behavior-mod-morph";
            label = "L5Y";
            #binding-cells = <0>;
            bindings = <&kp LG(Y)>, <&kp GRAVE>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5u: l5u {
            compatible = "zmk,behavior-mod-morph";
            label = "L5U";
            #binding-cells = <0>;
            bindings = <&kp LG(U)>, <&kp TILDE>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        left: left {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT";
            #binding-cells = <0>;
            bindings = <&mt RG(RIGHT_CONTROL) RG(J)>, <&kp LEFT>;

            mods = <(MOD_LGUI)>;
        };

        l5cmsl: l5cmsl {
            compatible = "zmk,behavior-mod-morph";
            label = "L5CMSL";
            #binding-cells = <0>;
            bindings = <&kp LG(COMMA)>, <&kp SLASH>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5cw: l5cw {
            compatible = "zmk,behavior-mod-morph";
            label = "L5CW";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp W>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5vq: l5vq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5VQ";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp Q>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5xq: l5xq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5XQ";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>, <&kp LC(LG(Q))>;

            mods = <(MOD_LGUI)>;
        };

        l5zesc: l5zesc {
            compatible = "zmk,behavior-mod-morph";
            label = "L5ZESC";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp ESC>;

            mods = <(MOD_LGUI)>;
        };

        bctrl2: bctrl2 {
            compatible = "zmk,behavior-hold-tap";
            label = "BCTRL2";
            bindings = <&ctrl2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        lay2lp: lay2lp {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2LP";
            #binding-cells = <0>;
            bindings = <&none>, <&kp LEFT_PARENTHESIS>;

            mods = <(MOD_LCTL)>;
        };

        lay2rp: lay2rp {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2RP";
            #binding-cells = <0>;
            bindings = <&none>, <&kp RIGHT_PARENTHESIS>;

            mods = <(MOD_LCTL)>;
        };

        lay2com: lay2com {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2COM";
            #binding-cells = <0>;
            bindings = <&none>, <&kp COMMA>;

            mods = <(MOD_LCTL)>;
        };

        lay2eq: lay2eq {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2EQ";
            #binding-cells = <0>;
            bindings = <&none>, <&kp EQUAL>;

            mods = <(MOD_LCTL)>;
        };

        lay2lb: lay2lb {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2LB";
            #binding-cells = <0>;
            bindings = <&none>, <&kp LEFT_BRACKET>;

            mods = <(MOD_LCTL)>;
        };

        lay2rb: lay2rb {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2RB";
            #binding-cells = <0>;
            bindings = <&none>, <&kp RIGHT_BRACKET>;

            mods = <(MOD_LCTL)>;
        };

        lay2exc: lay2exc {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2EXC";
            #binding-cells = <0>;
            bindings = <&none>, <&kp EXCL>;

            mods = <(MOD_LCTL)>;
        };

        lay2at: lay2at {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2AT";
            #binding-cells = <0>;
            bindings = <&none>, <&kp AT>;

            mods = <(MOD_LCTL)>;
        };

        lay2hash: lay2hash {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2HASH";
            #binding-cells = <0>;
            bindings = <&none>, <&kp HASH>;

            mods = <(MOD_LCTL)>;
        };

        lay2doll: lay2doll {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2DOLL";
            #binding-cells = <0>;
            bindings = <&none>, <&kp DOLLAR>;

            mods = <(MOD_LCTL)>;
        };

        lay2car: lay2car {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2CAR";
            #binding-cells = <0>;
            bindings = <&none>, <&kp CARET>;

            mods = <(MOD_LCTL)>;
        };

        lay2star: lay2star {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2STAR";
            #binding-cells = <0>;
            bindings = <&none>, <&kp STAR>;

            mods = <(MOD_LCTL)>;
        };

        lay2dq: lay2dq {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2DQ";
            #binding-cells = <0>;
            bindings = <&none>, <&kp DOUBLE_QUOTES>;

            mods = <(MOD_LCTL)>;
        };

        lay2and: lay2and {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2AND";
            #binding-cells = <0>;
            bindings = <&none>, <&kp AMPERSAND>;

            mods = <(MOD_LCTL)>;
        };

        lay2per: lay2per {
            compatible = "zmk,behavior-mod-morph";
            label = "LAY2PER";
            #binding-cells = <0>;
            bindings = <&none>, <&kp PERCENT>;

            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <16 17 18 19>;
        };
    };

    macros {
        cmd5: lm {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 5>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 5>;
        };

        cmdclick: cmdclick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&mkp LCLK>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "CMDCLICK";
        };

        ctrl2: ctrllayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL>,
                <&macro_release>,
                <&mo 2>;

            label = "CTRLLAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q           &kp W         &kp E    &kp R         &kp T                                      &kp Y        &kp U                &kp I      &kp O              &kp P
&mt LEFT_ALT A  &mt LSHIFT S  &lt 5 D  &mt LCTRL F   &kp G                                      &kp H        &mt RIGHT_CONTROL J  &lt 5 K    &mt RIGHT_SHIFT L  &mt RIGHT_ALT SEMI
&kp Z           &kp X         &kp C    &kp V         &kp B                                      &kp N        &kp M                &mkp LCLK  &kp DOT            &kp SLASH
&mo 6           &kp CAPS      &mo 1    &bcmd5 0 TAB  &bctrl2 0 SPACE  &mkp RCLK  &kp BACKSPACE  &lt 7 ENTER                                                     &kp ESC
            >;
        };

        number {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N1           &kp N2       &kp N3    &kp N4      &kp N5                       &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&trans           &trans       &trans    &trans      &trans                       &trans  &trans  &trans  &trans  &trans
&trans           &trans       &trans    &trans      &trans       &trans  &trans  &trans                          &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp TAB  &kp LS(TAB)  &trans     &trans  &trans                  &lay2exc  &lay2at  &lay2hash  &lay2doll  &lay2per
&trans   &trans       &lay2doll  &trans  &trans                  &lay2dq   &lay2lp  &lay2eq    &lay2rp    &lay2car
&trans   &trans       &trans     &trans  &trans                  &lay2and  &lay2lb  &lay2com   &lay2rb    &lay2star
&trans   &trans       &trans     &trans  &trans  &trans  &trans  &trans                                   &trans
            >;
        };

        function_layer {
            label = "NS";
            bindings = <
&kp D  &kp D  &kp D  &kp D  &kp D                &kp D  &kp D  &kp D  &kp D  &kp D
&kp D  &kp D  &kp D  &kp D  &kp D                &kp D  &kp D  &kp D  &kp D  &kp D
&kp D  &kp D  &kp D  &kp D  &kp D                &kp D  &kp D  &kp D  &kp D  &kp D
&kp D  &kp D  &kp D  &kp D  &kp D  &kp D  &kp D  &kp D                       &kp D
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&none   &none   &none   &none   &none                   &trans  &none   &trans  &trans  &trans
&none   &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&l5tabq  &l5stabw  &l5ef2  &l5rf3  &l5tf4                  &l5y       &l5u   &up        &l5opu   &l5ppd
&l5a     &l5s      &l5dc   &l5vf   &l5gz                   &l5hgrave  &left  &down      &right   &l5altq
&l5zesc  &l5xq     &l5cw   &l5vq   &l5bbs                  &l5n       &l5m   &l5clkesc  &l5cmsl  &none
&trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans                                &none
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans      &trans  &trans                  &trans  &trans  &trans      &trans  &trans
&trans  &trans  &bt BT_CLR  &trans  &trans                  &trans  &trans  &bt BT_NXT  &trans  &trans
&trans  &trans  &trans      &trans  &trans                  &trans  &trans  &trans      &trans  &trans
&trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans                              &bootloader
            >;
        };

        layer_7 {
            label = "SN";
            bindings = <
&kp N1    &kp N2   &kp N3   &kp N4             &kp N5                                     &kp TILDE         &kp PIPE        &kp MINUS  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)
&kp N6    &kp N7   &kp N8   &kp N9             &kp N0                                     &kp SINGLE_QUOTE  &kp LEFT_BRACE  &kp UNDER  &kp RIGHT_BRACE       &kp COLON
&kp CAPS  &kp F14  &kp F15  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                            &kp GRAVE         &kp LESS_THAN   &kp PLUS   &kp GREATER_THAN      &kp QUESTION
&trans    &trans   &trans   &sk LEFT_GUI       &kp LEFT_SHIFT   &kp LEFT_CONTROL  &trans  &trans                                                             &trans
            >;
        };
    };
};
