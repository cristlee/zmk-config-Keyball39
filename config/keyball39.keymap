#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&mt NUMBER_1 Q    &mt NUMBER_2 W  &mt NUMBER_3 E    &mt NUMBER_4 R     &mt N5 T                                 &mt NUMBER_6 Y  &mt N7 U  &mt N8 I     &mt N9 O   &mt N0 P
&mt LEFT_ARROW A  &mt UP_ARROW S  &mt DOWN_ARROW D  &mt RIGHT_ARROW F  &kp G                                    &kp H           &kp J     &lt 4 K      &kp L      &kp SEMI
&kp Z             &kp X           &kp C             &kp V              &kp B                                    &kp N           &kp M     &lt 5 COMMA  &lt 6 DOT  &kp SLASH
&kp LEFT_SHIFT    &kp LEFT_ALT    &kp LEFT_CONTROL  &kp LEFT_GUI       &lt 5 SPACE  &lt 4 TAB  &lt 2 BACKSPACE  &lt 3 ENTER                                       &kp RIGHT_SHIFT
            >;
        };

        number {
            bindings = <
&trans  &trans  &trans  &trans        &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp LEFT_GUI  &trans  &trans  &trans  &trans                          &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1     &kp N2       &kp N3    &kp N4      &kp N5                       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT
&kp N6           &kp N7       &kp N8    &kp N9      &kp N0                       &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp BACKSLASH
&trans           &trans       &trans    &trans      &trans       &trans  &trans  &trans                                                                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none           &none         &trans          &trans           &trans                  &kp F4              &kp F5               &kp C_VOL_UP          &kp C_VOL_DN           &kp ESC
&kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans                  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp K_MUTE
&kp N1          &kp N2        &kp N3          &kp N4           &kp N5                  &kp TAB             &kp GRAVE            &none                 &kp LC(SPACE)          &kp LEFT_COMMAND
&trans          &trans        &trans          &trans           &trans  &trans  &trans  &trans                                                                                &kp LC(LG(Q))
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2        &kp N3          &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8  &kp N9     &kp N0
&kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none                   &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK
&none           &none         &none           &none      &none                   &kp PAGE_DOWN  &none      &trans  &trans     &trans
&none           &trans        &trans          &trans     &trans  &trans  &trans  &trans                                       &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&kp N1    &kp N2  &kp N3    &kp N4     &kp N5                  &kp N6     &kp N7          &kp N8  &kp N9           &kp N0
&kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &trans                  &kp PG_UP  &mkp LCLK       &trans  &mkp RCLK        &trans
&trans    &trans  &trans    &trans     &trans                  &kp PG_DN  &kp LEFT_ARROW  &trans  &kp RIGHT_ARROW  &trans
&trans    &trans  &trans    &trans     &trans  &trans  &trans  &trans                                              &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &bt BT_NXT
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &bootloader
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
