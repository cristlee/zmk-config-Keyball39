#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph

    behaviors {
        q_tab: q_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_TAB";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp TAB>;

            mods = <(MOD_LGUI|MOD_LCTL)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL)>;
        };

        w_grave: w_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "W_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(TAB)>;

            mods = <(MOD_LGUI|MOD_LCTL)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL)>;
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "DOT_COMMA";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;

            tapping-term-ms = <240>;
        };

        test: test {
            compatible = "zmk,behavior-hold-tap";
            label = "TEST";
            bindings = <&lm>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
        };

        greatless: greatless {
            compatible = "zmk,behavior-tap-dance";
            label = "GREATLESS";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&kp LESS_THAN>;

            tapping-term-ms = <240>;
        };

        pipe_bsls: pipe_bsls {
            compatible = "zmk,behavior-tap-dance";
            label = "PIPE_BSLS";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BACKSLASH>;
        };

        lockesc: lockesc {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCKESC";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp LC(LG(Q))>;
        };

        quotes: quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTES";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        slash_question: slash_question {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASH_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp QUESTION>;
        };

        esc_q: esc_q {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_Q";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp Q>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        grave_tilde: grave_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_TILDE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        under_equal: under_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDER_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp EQUAL>;
        };

        v_up: v_up {
            compatible = "zmk,behavior-mod-morph";
            label = "V_UP";
            #binding-cells = <0>;
            bindings = <&none>, <&kp C_VOLUME_UP>;

            mods = <(MOD_LGUI)>;
        };

        v_down: v_down {
            compatible = "zmk,behavior-mod-morph";
            label = "V_DOWN";
            #binding-cells = <0>;
            bindings = <&none>, <&kp C_VOLUME_DOWN>;

            mods = <(MOD_LGUI)>;
        };

        right: right {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT";
            #binding-cells = <0>;
            bindings = <&mt RG(RIGHT_SHIFT) LG(L)>, <&kp RIGHT_ARROW>;

            mods = <(MOD_LGUI)>;
        };

        up: up {
            compatible = "zmk,behavior-mod-morph";
            label = "UP";
            #binding-cells = <0>;
            bindings = <&kp LG(I)>, <&kp UP_ARROW>;

            mods = <(MOD_LGUI)>;
        };

        down: down {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN";
            #binding-cells = <0>;
            bindings = <&kp LG(K)>, <&kp DOWN_ARROW>;

            mods = <(MOD_LGUI)>;
        };

        page_up: page_up {
            compatible = "zmk,behavior-mod-morph";
            label = "PAGE_UP";
            #binding-cells = <0>;
            bindings = <&kp LG(N)>, <&kp PAGE_UP>;

            mods = <(MOD_LGUI)>;
        };

        page_down: page_down {
            compatible = "zmk,behavior-mod-morph";
            label = "PAGE_DOWN";
            #binding-cells = <0>;
            bindings = <&kp LG(M)>, <&kp PAGE_DOWN>;

            mods = <(MOD_LGUI)>;
        };

        l5a: l5a {
            compatible = "zmk,behavior-mod-morph";
            label = "L5A";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_ALT) LG(A)>, <&kp A>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5s: l5s {
            compatible = "zmk,behavior-mod-morph";
            label = "L5S";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_SHIFT) LG(S)>, <&kp S>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5gz: l5gz {
            compatible = "zmk,behavior-mod-morph";
            label = "L5GZ";
            #binding-cells = <0>;
            bindings = <&kp LG(G)>, <&kp LS(Z)>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5dc: l5dc {
            compatible = "zmk,behavior-mod-morph";
            label = "L5DC";
            #binding-cells = <0>;
            bindings = <&kp LG(D)>, <&kp C>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5vf: l5vf {
            compatible = "zmk,behavior-mod-morph";
            label = "L5VF";
            #binding-cells = <0>;
            bindings = <&mt RG(LEFT_CONTROL) LG(F)>, <&kp V>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5rf3: l5rf3 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5RF3";
            #binding-cells = <0>;
            bindings = <&kp LG(R)>, <&kp F3>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5ef2: l5ef2 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5EF2";
            #binding-cells = <0>;
            bindings = <&kp LG(E)>, <&kp F2>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5tf4: l5tf4 {
            compatible = "zmk,behavior-mod-morph";
            label = "L5TF4";
            #binding-cells = <0>;
            bindings = <&kp LG(T)>, <&kp F4>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5tabq: l5tabq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5TABQ";
            #binding-cells = <0>;
            bindings = <&kp LG(Q)>, <&kp TAB>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5stabw: l5stabw {
            compatible = "zmk,behavior-mod-morph";
            label = "L5STABW";
            #binding-cells = <0>;
            bindings = <&kp LG(W)>, <&kp LS(TAB)>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5altq: l5altq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5ALTQ";
            #binding-cells = <0>;
            bindings = <&kp RG(RIGHT_ALT)>, <&kp GRAVE>;

            mods = <(MOD_LGUI)>;
        };

        lll: lll {
            compatible = "zmk,behavior-mod-morph";
            label = "LLL";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_ARROW>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        rrr: rrr {
            compatible = "zmk,behavior-mod-morph";
            label = "RRR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5bq: l5bq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5BQ";
            #binding-cells = <0>;
            bindings = <&kp LG(B)>, <&kp LG(LC(Q))>;

            mods = <(MOD_LGUI)>;
        };

        l5clkesc: l5clkesc {
            compatible = "zmk,behavior-mod-morph";
            label = "L5CLKESC";
            #binding-cells = <0>;
            bindings = <&cmdclick>, <&kp ESC>;

            mods = <(MOD_LGUI)>;
        };

        l5ow: l5ow {
            compatible = "zmk,behavior-mod-morph";
            label = "L5OW";
            #binding-cells = <0>;
            bindings = <&kp LG(O)>, <&kp LG(W)>;

            mods = <(MOD_LGUI)>;
        };

        l5h: l5h {
            compatible = "zmk,behavior-mod-morph";
            label = "L5H";
            #binding-cells = <0>;
            bindings = <&kp LG(H)>, <&kp H>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5pq: l5pq {
            compatible = "zmk,behavior-mod-morph";
            label = "L5PQ";
            #binding-cells = <0>;
            bindings = <&kp LG(P)>, <&kp LG(Q)>;

            mods = <(MOD_LGUI)>;
        };

        l5y: l5y {
            compatible = "zmk,behavior-mod-morph";
            label = "L5Y";
            #binding-cells = <0>;
            bindings = <&kp LG(Y)>, <&kp GRAVE>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        l5u: l5u {
            compatible = "zmk,behavior-mod-morph";
            label = "L5U";
            #binding-cells = <0>;
            bindings = <&kp LG(U)>, <&kp TILDE>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        left: left {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT";
            #binding-cells = <0>;
            bindings = <&mt RG(RIGHT_CONTROL) LG(J)>, <&kp LEFT_ARROW>;

            mods = <(MOD_LGUI)>;
        };

        l5cmsl: l5cmsl {
            compatible = "zmk,behavior-mod-morph";
            label = "L5CMSL";
            #binding-cells = <0>;
            bindings = <&kp LG(COMMA)>, <&kp SLASH>;

            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <16 17 18 19>;
        };
    };

    macros {
        lm: lm {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 5>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 5>;
        };

        cmdclick: cmdclick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&mkp LCLK>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "CMDCLICK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&q_tab          &w_grave      &kp E    &kp R        &kp T                                             &kp Y        &kp U                &kp I      &kp O              &kp P
&mt LEFT_ALT A  &mt LSHIFT S  &lt 5 D  &mt LCTRL F  &kp G                                             &kp H        &mt RIGHT_CONTROL J  &lt 5 K    &mt RIGHT_SHIFT L  &mt RIGHT_ALT SEMI
&kp Z           &kp X         &lt 2 C  &kp V        &kp B                                             &kp N        &kp M                &mkp LCLK  &kp DOT            &kp SLASH
&mo 6           &kp CAPS      &mo 1    &test 0 TAB  &mt LEFT_CONTROL SPACE  &mkp LCLK  &kp BACKSPACE  &lt 7 ENTER                                                     &kp CAPS
            >;
        };

        number {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR  &kp PERCENT                  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp GRAVE   &kp N0                       &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&trans           &trans         &trans        &trans      &trans                       &trans  &trans  &trans  &trans  &trans
&trans           &trans         &trans        &trans      &trans       &trans  &trans  &trans                          &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp EXCL           &kp AT                &kp HASH   &kp DOLLAR             &kp PERCENT
&kp LEFT_SHIFT   &trans       &trans    &trans      &kp GRAVE                    &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp EQUAL  &kp RIGHT_PARENTHESIS  &kp CARET
&kp LSHFT        &trans       &trans    &trans      &kp CAPS                     &kp AMPERSAND      &kp LEFT_BRACKET      &kp PLUS   &kp RIGHT_BRACKET      &kp STAR
&trans           &trans       &trans    &trans      &trans       &trans  &trans  &trans                                                                     &trans
            >;
        };

        function_layer {
            label = "NS";
            bindings = <
&kp N1        &kp N2   &kp N3   &kp N4             &kp N5                                     &pipe_bsls  &minus_plus  &under_equal  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)
&kp N6        &kp N7   &kp N8   &kp N9             &kp N0                                     &quotes     &lll         &lockesc      &rrr                  &greatless
&grave_tilde  &kp F14  &kp F15  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                            &none       &none        &none         &none                 &none
&trans        &trans   &trans   &sk LEFT_GUI       &kp LEFT_SHIFT   &kp LEFT_CONTROL  &trans  &trans                                                       &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&none   &none   &none   &none   &none                   &trans  &none   &trans  &trans  &trans
&none   &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&l5tabq    &l5stabw   &l5ef2     &l5rf3     &l5tf4                  &l5y      &l5u        &up        &l5ow    &l5pq
&l5a       &l5s       &l5dc      &l5vf      &l5gz                   &l5h      &left       &down      &right   &l5altq
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &l5bq                   &page_up  &page_down  &l5clkesc  &l5cmsl  &none
&trans     &trans     &trans     &trans     &trans  &trans  &trans  &trans                                    &kp Q
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &bt BT_NXT
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &bootloader
            >;
        };

        layer_7 {
            label = "SN";
            bindings = <
&kp N1    &kp N2   &kp N3   &kp N4             &kp N5                                     &kp TILDE  &pipe_bsls     &under_equal  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)
&kp N6    &kp N7   &kp N8   &kp N9             &kp N0                                     &quotes    &lll           &minus_plus   &rrr                  &kp COLON
&kp CAPS  &kp F14  &kp F15  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                            &kp GRAVE  &kp LESS_THAN  &kp COMMA     &kp GREATER_THAN      &kp QUESTION
&trans    &trans   &trans   &sk LEFT_GUI       &kp LEFT_SHIFT   &kp LEFT_CONTROL  &trans  &trans                                                        &trans
            >;
        };
    };
};
